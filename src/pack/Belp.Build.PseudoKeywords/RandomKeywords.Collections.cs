// <auto-generated/>
#pragma warning disable
#nullable disable

global using static Belp.Build.PseudoKeywords.RandomKeywords.Collections;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace Belp.Build.PseudoKeywords;

partial class RandomKeywords
{

#pragma warning disable IDE1006 // Naming Styles

    /// <summary>
    /// Provides random element access keywords.
    /// </summary>
    internal static partial class Collections
    {
        #region Explicit Function - Index

        /// <summary>
        /// Returns a random integer that is less than the specified <paramref name="collection"/>'s <see cref="ICollection.Count"/>.
        /// </summary>
        /// <param name="collection">The collection.</param>
        /// <returns>A random integer that is less than the specified <paramref name="collection"/>'s <see cref="ICollection.Count"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int rnextindex(ICollection collection) => Random.Shared.Next(collection.Count);

        /// <summary>
        /// Returns a random index less than the specified <paramref name="list"/>'s <see cref="ICollection.Count"/>.
        /// </summary>
        /// <param name="list">The list.</param>
        /// <param name="element">The element at the returned index.</param>
        /// <returns>A random index less than the specified <paramref name="list"/>'s <see cref="ICollection.Count"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int rnextindexo(IList list, out object? element)
        {
            var index = Random.Shared.Next(list.Count);
            element = list[index];
            return index;
        }

        /// <summary>
        /// Returns a random index less than the specified <paramref name="list"/>'s <see cref="ICollection{T}.Count"/>.
        /// </summary>
        /// <typeparam name="T"><inheritdoc cref="IList{T}"/></typeparam>
        /// <param name="list">The list.</param>
        /// <param name="element">The element at the returned index.</param>
        /// <returns>A random index less than the specified <paramref name="list"/>'s <see cref="ICollection{T}.Count"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int rnextindex<T>(IList<T> list, out T element)
        {
            var index = Random.Shared.Next(list.Count);
            element = list[index];
            return index;
        }

        #endregion

        #region Explicit Function - Element

        /// <summary>
        /// Returns a random element inside the specified <paramref name="list"/>.
        /// </summary>
        /// <param name="list">The list.</param>
        /// <returns>A random element inside the specified <paramref name="list"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static object? rnextelemento(IList list) => list[Random.Shared.Next(list.Count)];

        /// <summary>
        /// Returns a random element inside the specified <paramref name="list"/>.
        /// </summary>
        /// <typeparam name="T"><inheritdoc cref="IList{T}"/></typeparam>
        /// <param name="list">The list.</param>
        /// <returns>A random element inside the specified <paramref name="list"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static T rnextelement<T>(IList<T> list) => list[Random.Shared.Next(list.Count)];

        /// <summary>
        /// Returns a random element inside the specified <paramref name="list"/>.
        /// </summary>
        /// <param name="list">The list.</param>
        /// <param name="index">The returned element's index.</param>
        /// <returns>A random element inside the specified <paramref name="list"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static object? rnextelemento(IList list, out int index) => list[index = Random.Shared.Next(list.Count)];

        /// <summary>
        /// Returns a random element inside the specified <paramref name="list"/>.
        /// </summary>
        /// <typeparam name="T"><inheritdoc cref="IList{T}"/></typeparam>
        /// <param name="list">The list.</param>
        /// <param name="index">The returned element's index.</param>
        /// <returns>A random element inside the specified <paramref name="list"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static T rnextelement<T>(IList<T> list, out int index) => list[index = Random.Shared.Next(list.Count)];

        #endregion
    }

#pragma warning restore IDE1006 // Naming Styles

}
