using Microsoft.CodeAnalysis.Text;
using System.Text;

namespace Belp.CodeAnalysis.ManifestResourceGenerators.UnitTests;

public static partial class ManifestResourcesGenerator
{
    /// <summary>
    /// Gets the source code of ManifestResourcesHelper.cs.
    /// </summary>
    public static (string filename, SourceText content) Source_ManifestResourcesHelper => (
        """Belp.CodeAnalysis.ManifestResourceGenerators\Belp.CodeAnalysis.ManifestResourceGenerators.ManifestResourcesGenerator\ManifestResourcesHelper.cs""",
        SourceText.From(
            """
            // <auto-generated/>
            #pragma warning disable
            #nullable disable

            /// <summary>
            /// Provides constants and methods to access manifest resources.
            /// </summary>
            static partial class ManifestResourcesHelper
            {
                private static readonly global::System.Reflection.Assembly _assembly = typeof(ManifestResourcesHelper).Assembly;

                /// <summary>
                /// Gets a stream to the resource with the specified name.
                /// </summary>
                /// <param name="resourceName">The resource's name.</param>
                /// <returns>A stream to the resource with the specified name if the resource exists; otherwise, <see langword="null"/>.</returns>
                public static global::System.IO.Stream? GetStream(string resourceName)
                {
                    return _assembly.GetManifestResourceStream(resourceName);
                }

                /// <summary>
                /// Gets the resource with the specified name and turns it into a string.
                /// </summary>
                /// <param name="resourceName">The resource's name.</param>
                /// <returns>The resource with the specified name as a string if the resource exists; otherwise, <see langword="null"/>.</returns>
                public static string? GetString(string resourceName)
                {
                    using (global::System.IO.Stream? stream = _assembly.GetManifestResourceStream(resourceName))
                    {
                        if (ReferenceEquals(stream, null))
                        {
                            return null;
                        }

                        using (global::System.IO.StreamReader reader = new global::System.IO.StreamReader(stream))
                        {
                            return reader.ReadToEnd();
                        }
                    }
                }
            }
            
            """,
            Encoding.UTF8
        )
    );

    /// <summary>
    /// Gets the path to the generator's generated sources.
    /// </summary>
    public static string OutputPath => """Belp.CodeAnalysis.ManifestResourceGenerators\Belp.CodeAnalysis.ManifestResourceGenerators.ManifestResourcesGenerator\""";
}
